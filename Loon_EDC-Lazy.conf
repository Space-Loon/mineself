# ErdongChan-LazyConf
# Update:2022.5
# ------------------
# YouTube：https://i.tgaro.top/yt
# Telegram：https://t.me/erdongchan
# 图标库：https://github.com/erdongchanyo/icon
# ------------------
# 导入配置后,添加机场订阅链接,之后更新订阅规则。
# 点击配置-证书管理-生成新的CA证书，之后进入「设置」>「通用」>「描述文件」, 安装Loon的证书, 并在「设置」>「通用」>「关于本机」>「证书信任设置」开启对Loon证书的信任。

[General]
# IPv6 支持
ipv6 = false
# > 跳过某个域名或者IP段
skip-proxy = 127.0.0.1,192.168.0.0/16,10.0.0.0/8,172.16.0.0/12,100.64.0.0/10,localhost,*.local,passenger.t3go.cn,passenger.t3go.cn
bypass-tun = 10.0.0.0/8,100.64.0.0/10,127.0.0.0/8,169.254.0.0/16,172.16.0.0/12,192.0.0.0/24,192.0.2.0/24,192.88.99.0/24,192.168.0.0/16,198.18.0.0/15,198.51.100.0/24,203.0.113.0/24,224.0.0.0/4,255.255.255.255/32
# DNS 服务器
dns-server = system,119.29.29.29,114.114.114.114,223.5.5.5
# Wi-Fi 访问
# > 允许 Wi-Fi 网络下其它设备访问
allow-udp-proxy = false
allow-wifi-access = false
wifi-access-http-port = 7222
wifi-access-socket5-port = 7221
# > 代理测速 URL
proxy-test-url = http://cp.cloudflare.com/generate_204
# > 测速超时 (s)
test-timeout = 5
interface-mode = auto
# > 解决一些ip请求无法匹配域名类规则的问题。real-ip指定的域名将不返回fake ip响应，直接将dns请求发往目标dns服务器
real-ip = msftconnecttest.com, msftncsi.com, *.msftconnecttest.com, *.msftncsi.com, *.srv.nintendo.net, *.stun.playstation.net, xbox.*.microsoft.com, *.xboxlive.com, *.battlenet.com.cn, *.battlenet.com, *.blzstatic.cn, *.battle.net
# 解析器
resource-parser = https://raw.githubusercontent.com/Peng-YM/Sub-Store/master/scripts/sub-store-parser.js

[Host]
#可以使用以下四种模式：
# 1 指定域名使用对应的IP地址
# 2 将域名指向另一个域名
# 3 指定域名请求DNS时使用特定的DNS服务器，格式为：google.com = server:8.8.8.8 或者 *.baidu.com = server:https://example.com/dns-query
#  指定具体的SSID环境下使用特定的DNS服务器

[Proxy]

[Remote Proxy]
# 远程节点订阅
# 机场名(可改为你喜欢的名字) = 订阅URL
# > Sub-Store订阅，Sub-Store用户可自行替换自己的Sub-Store订阅链接，方便多机场用户
MyProxy = https://sub.store/download/collection/MySub,parser-enable = true,udp=false,fast-open=false,vmess-aead=true
机场1 = https://example/server-complete.txt
机场2 = https://example2/server-complete.txt

[Remote Filter]
# 筛选订阅节点，筛选后的结果可加入到策略组中，目前支持三种筛选方式
# NodeSelect: 使用在UI上选择的节点。
# NameKeyword: 根据提供的关键词对订阅中所有节点的名称进行筛选，使用筛选后的节点。
# NameRegex: 根据提供的正则表达式对订阅中所有节点的名称进行筛选，使用筛选后的节点。
# 模板 = NameRegex, FilterKey = "(?i)(|)"
香港 = NameRegex, FilterKey = "(?i)(港|HK|Hong)"
台湾 = NameRegex, FilterKey = "(?i)(台|TW|Tai)"
日本 = NameRegex, FilterKey = "(?i)(日本|川日|东京|大阪|泉日|埼玉|沪日|深日|JP|Japan)"
韩国 = NameRegex, FilterKey = "(?i)(KR|Korea|KOR|首尔|韩|韓)"
美国 = NameRegex, FilterKey = "(?i)(美|波特兰|达拉斯|俄勒冈|凤凰城|费利蒙|硅谷|拉斯维加斯|洛杉矶|圣何塞|圣克拉拉|西雅图|芝加哥|US|United States)"
新加坡 = NameRegex, FilterKey = "(?i)(新加坡|坡|狮城|SG|Singapore)"
智利 = NameRegex, FilterKey = "(?i)(智利|智|CL)"
土耳其 = NameRegex, FilterKey = "(?i)(土|TR)"
德国 = NameRegex, FilterKey = "(?i)(德|DE)"
南非 = NameRegex, FilterKey = "(?i)(南非|ZA)"
原生节点 = NameRegex, FilterKey = "(?i)(原生)"
流媒体解锁 = NameRegex, FilterKey = "(?i)(流媒体|解锁)"
Myproxy = NameRegex, FilterKey = "(?i)(.*)"

[Proxy Group]
## 策略组
## 将分流规则传递过来的网络请求进行分发
# 所有节点
Proxy = select,MyProxy,img-url = https://raw.githubusercontent.com/erdongchanyo/icon/main/Policy-Filter/Proxy.png
# 自动选择最优节点
# 服务器按地区分组策略
# Global策略
Global = select,US,HK,JP,TW,SG,FINAL,DIRECT,img-url = https://raw.githubusercontent.com/erdongchanyo/icon/main/Policy-Filter/Outside.png
# 国外媒体细分策略
# > Whatsapp策略
Whatsapp = select,新加坡,FINAL,DIRECT,img-url = https://github.com/erdongchanyo/icon/blob/main/Policy-Filter/Direct.png
# > Netflix策略
Netflix = select,流媒体解锁,新加坡,台湾,FINAL,DIRECT,img-url = https://raw.githubusercontent.com/erdongchanyo/icon/main/Policy-Filter/Netflix.png
# > Disney+策略
Disney+ = select,流媒体解锁,新加坡,台湾,FINAL,DIRECT,img-url = https://raw.githubusercontent.com/erdongchanyo/icon/main/Policy-Filter/Disney+.png
# 国内媒体细分策略
# > BiliBili策略
Bilibili = select,新加坡,台湾,DIRECT,img-url = https://raw.githubusercontent.com/erdongchanyo/icon/main/Policy-Filter/Bilibili.png
# 软件&服务策略
# > Telegram策略
Telegram = select,Proxy,FINAL,DIRECT,img-url = https://raw.githubusercontent.com/erdongchanyo/icon/main/Policy-Filter/Telegram.png
# > Apple策略
Apple = select,Proxy,FINAL,DIRECT,img-url = https://raw.githubusercontent.com/erdongchanyo/icon/main/Policy-Filter/Apple.png
# > Google策略
Google = select,Proxy,FINAL,DIRECT,img-url = https://raw.githubusercontent.com/erdongchanyo/icon/main/Policy-Filter/Google.png
# Mainland策略-国内访问
Mainland = select,Proxy,FINAL,DIRECT,img-url = https://raw.githubusercontent.com/erdongchanyo/icon/main/Policy-Filter/Mainland.png
# Advertising策略-去广告
Advertising = select,DIRECT,REJECT,img-url = https://raw.githubusercontent.com/erdongchanyo/icon/main/Policy-Filter/AdBlock.png
# FINAL策略：如果以上的策略均未被匹配到，则听从此策略组的规定
FINAL = select,Auto-HK,Proxy,DIRECT,img-url = https://raw.githubusercontent.com/erdongchanyo/icon/main/Policy-Filter/Final01.png

[Remote Rule]
## 远程分流规则订阅
## 将网络请求进行分流，网络请求的走向(是否能成功访问)由匹配到的策略组决定
# Whatsapp规则
https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Loon/Whatsapp/Whatsapp.list, policy=Whatsapp, tag=Whatsapp规则, enabled=true
# Netflix规则
https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Loon/Netflix/Netflix.list, policy=Netflix, tag=Netflix规则, enabled=true
# Disney规则
https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Loon/Disney/Disney.list, policy=Disney+, tag=Disney+规则, enabled=true
# Telegram规则
https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Loon/Telegram/Telegram.list, policy=Telegram, tag=Telegram规则, enabled=true
# Google规则
https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Loon/Google/Google.list, policy=Google, tag=Google规则, enabled=true
# Apple规则
https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Loon/Apple/Apple.list, policy=Apple, tag=Apple规则, enabled=true
# Global规则
https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Loon/Global/Global.list, policy=Global, tag=Global规则, enabled=true
# BiliBili规则
https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Loon/BiliBili/BiliBili.list, policy=BiliBili, tag=BiliBili规则, enabled=true
# Advertising规则
https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Loon/Advertising/Advertising.list, policy=Advertising, tag=Advertising规则, enabled=true
# Mainland规则
https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Loon/China/China.list, policy=Mainland, tag=Mainland规则, enabled=true

[Rule]
# 本地分流规则:相同规则下本地规则优先生效
# 绕过企业证书过期
DOMAIN,ocsp.apple.com,REJECT
# 其它
DOMAIN-SUFFIX,local,DIRECT
# 抖音本地分流
DOMAIN-SUFFIX,snssdk.com,DIRECT
DOMAIN-SUFFIX,amemv.com,DIRECT
GEOIP,CN,DIRECT
FINAL,FINAL

[Remote Rewrite]
# 远程重写

[URL Rewrite]
# 本地重写

[Remote Script]

[Script]
# 任务脚本
generic script-path=https://raw.githubusercontent.com/Loon0x00/LoonScript/main/MediaCheck/check.js, tag=流媒体-解锁查询, img-url=https://raw.githubusercontent.com/erdongchanyo/icon/main/Policy-Filter/GMedia.png
enable = true


[Plugin]
# 远程(重写)插件
# 模板写法 各插件写法不同，添加前先在APP试添加后写入
# Loon 自带插件管理系统
https://raw.githubusercontent.com/Peng-YM/Loon-Gallery/master/loon-gallery.plugin, enabled=true
# 番茄小说
https://raw.githubusercontent.com/zqzess/rule_for_quantumultX/master/Loon/Plugin/FanQieNovel.plugin, policy=REJECT, tag=番茄小说, enabled=true
# 油管去广告 Plan A
https://gitlab.com/lodepuly/vpn_tool/-/raw/main/Tool/Loon/Plugin/YouTube_remove_ads.plugin, policy=REJECT, tag=油管去广告PlanA, enabled=true
# 油管去广告 Plan B
https://gitlab.com/lodepuly/vpn_tool/-/raw/main/Tool/Loon/Plugin/YouTube_remove_ads_plan_b.plugin, policy=REJECT, tag=油管去广告PlanB, enabled=false
# Blackmatrix7的Advertising
https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rewrite/Loon/Advertising/Advertising.plugin, policy=REJECT, tag=Advertising-B7, enabled=true


[MITM]
hostname = 
enable = true
skip-server-cert-verify = true
